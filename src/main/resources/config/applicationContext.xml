<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context    
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        ">
    <!--<import resource="applicationContext-quartz.xml"/>
    
	--><!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	
	<context:component-scan base-package="com.antke.power.service.impl"/>
	<context:component-scan base-package="com.antke.power.service"/>
	<context:component-scan base-package="com.antke.power.action" />
	
	<context:component-scan base-package="com.antke.promotion.service.impl"/>
	<context:component-scan base-package="com.antke.promotion.service"/>
	<context:component-scan base-package="com.antke.promotion.action" />
	
	<context:component-scan base-package="com.antke.website.service.impl"/>
	<context:component-scan base-package="com.antke.website.service"/>
	<context:component-scan base-package="com.antke.website.action" />
	<context:component-scan base-package="com.antke.website.thirdparty" />
	<context:component-scan base-package="com.antke.website.thirdparty.ali" />
	<context:component-scan base-package="com.antke.website.thirdparty.wx" />
	<context:component-scan base-package="com.antke.website.dao"/>
	
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<!-- 数据库配置文件位置 -->
	<!-- <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/jdbc.properties</value>
				<value>classpath:/config/alipay.properties</value>
			</list>
		</property>
	</bean> -->

	<bean class="com.antke.website.servlet.EncryptPropertyPlaceholderConfigurer" 
		p:location="classpath:/config/jdbc.properties">
	</bean>
	
	<!-- 有数据源C3P0配置实现方法 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<!-- 用户名 -->
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<!-- 密码 -->
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<!-- 连接池中保留的最大连接数 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath*:**/*Mapper.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >  
        <property name="basePackage" value="com.antke.power.dao;com.antke.promotion.dao;com.antke.website.dao" ></property>  
    </bean>  

	<!-- the config of transaction -->
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<tx:annotation-driven transaction-manager="transactionManager" /> -->
	<bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
 		   
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
		</tx:attributes>
   </tx:advice>
   <!--<aop:config>
		<aop:pointcut id="mypointcut" expression="execution(* com.antke.website.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="mypointcut" />
   </aop:config>
	-->
	<import resource="classpath:**/applicationContext-*.xml" />
	
	

</beans>
